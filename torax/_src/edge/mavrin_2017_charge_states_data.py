# Copyright 2024 DeepMind Technologies Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Impurity charge states data valid at the tokamak edge.

Polynomial fit coefficients from A. A. Mavrin (2017):
Radiative Cooling Rates for Low-Z Impurities in Non-coronal Equilibrium State.
J Fusion Energ (2017) 36:161-172
DOI 10.1007/s10894-017-0136-z
"""

from typing import Final, Mapping

import immutabledict
import numpy as np
from torax._src import array_typing

# Tables 2, 4, 7, 9, 10, 12, 14, 16
# Disable line-too-long check for the coefficients table for readability.
# pylint: disable=line-too-long
COEFFS: Final[Mapping[str, array_typing.Array]] = (
    immutabledict.immutabledict({
        'He': np.array([
            [-5.3229e00, 2.9480e-01, -7.5801e-01, 1.2390e-01, 2.8742e-01, 3.0230e-01],
            [2.3974e01, -9.7749e-01, 2.6057e00, 3.3522e-01, 1.9520e-02, -3.7672e-04],
            [-2.0820e-02, 7.1838e-01, 3.9868e-01, 6.2830e-02, 1.1370e-02, 8.0700e-03],
            [-2.5859e01, 4.6087e-01, -2.1295e00, -2.1004e-01, -9.0900e-03, -6.6674e-05],
            [1.5630e00, -2.5075e00, -7.0155e-01, -8.6750e-02, -8.9400e-03, -2.6500e-03],
            [-2.7940e-01, -2.2053e-01, -7.8740e-02, -1.2890e-02, 9.3167e-04, 4.6700e-03],
            [-2.2304e00, 5.7576e-01, 5.7676e-01, 4.3490e-02, 1.3700e-03, 1.9595e-05],
            [-4.3071e00, 1.9437e00, 3.0493e-01, 2.9910e-02, 1.9700e-03, 2.4019e-04],
            [1.0620e-02, 2.7694e-01, 7.2220e-02, 1.0680e-02, 5.7310e-04, -5.7766e-04],
            [-2.3440e-02, 1.3210e-02, 7.6100e-03, 2.2200e-03, 8.8833e-04, 9.7854e-04],
        ]),
        'Li': np.array([
            [-1.0100e-03, -2.0635e00, -1.0637e00, -4.0067e-01, 3.7673e-01, 4.7538e-01],
            [2.7249e-01, 4.3288e00, 2.6510e00, 1.4848e00, 1.3675e-01, 2.8900e-03],
            [-1.7260e-02, -2.8654e-01, 2.8874e-01, 3.0008e-01, 5.2880e-02, 1.5530e-02],
            [-1.2369e00, -2.3837e00, -1.5162e00, -8.3674e-01, -6.1300e-02, -1.1900e-03],
            [-8.1530e-02, 6.6065e-01, -3.5040e-01, -3.5714e-01, -4.9940e-02, -5.3100e-03],
            [-1.3690e-02, 1.3410e-02, -5.4230e-02, -4.7950e-02, -7.7600e-03, 8.9900e-03],
            [1.3026e00, 4.1307e-01, 2.8809e-01, 1.5698e-01, 9.0100e-03, 1.4464e-04],
            [1.9173e-01, -3.4624e-01, 1.0889e-01, 1.0760e-01, 1.1850e-02, 5.7357e-04],
            [1.0850e-02, -4.9130e-02, 4.1090e-02, 3.3880e-02, 5.7100e-03, -8.2221e-04],
            [-2.4500e-03, -6.1700e-03, 8.1200e-03, 6.4300e-03, 2.7100e-03, 2.2800e-03],
        ]),
        'Be': np.array([
            [-1.4344e-01, 1.6730e-02, 1.0467e00, -5.1970e-01, 3.9007e-01, 5.4416e-01],
            [2.0962e00, 1.2580e00, -2.6102e00, 1.5563e00, 2.5938e-01, 5.8290e-02],
            [-4.8170e-02, 1.1149e-01, -3.6741e-01, 2.7329e-01, 1.1357e-01, 6.8610e-02],
            [-2.5849e00, -1.7967e00, 2.4758e00, -7.1881e-01, -1.0490e-01, -1.8950e-02],
            [4.0719e-01, -3.3248e-01, 5.9571e-01, -2.6616e-01, -8.7250e-02, -3.0430e-02],
            [-1.2800e-03, -1.9620e-02, 4.7160e-02, -4.0450e-02, -4.3300e-03, 2.2080e-02],
            [5.7597e-01, 8.2415e-01, -6.4727e-01, 1.1044e-01, 1.4010e-02, 2.0000e-03],
            [-5.4392e-01, 2.2028e-01, -2.2861e-01, 6.5560e-02, 1.7660e-02, 3.7000e-03],
            [1.7140e-02, 1.5680e-02, -4.7890e-02, 2.4220e-02, 6.0200e-03, -2.9000e-03],
            [4.9000e-03, -1.0200e-03, -2.9700e-03, 6.5700e-03, 4.6900e-03, 4.5900e-03],
        ]),
        'C': np.array([
            [-1.7799e-01, 6.8333e-01, -1.3092e00, 1.7808e00, -4.7139e00, 4.1877e-01],
            [2.4465e00, -2.0893e00, 4.1883e00, -1.3260e00, 6.0788e00, 3.4803e-01],
            [1.8370e-02, 1.4225e-01, 1.1598e-01, 5.1150e-01, -5.7445e-01, 1.3581e-01],
            [-1.2305e01, 3.0963e00, -3.0465e00, 2.3885e-01, -2.1878e00, -1.1064e-01],
            [-1.2788e00, -4.8037e-01, -1.8574e-01, -6.8025e-01, 6.2149e-01, -8.0230e-02],
            [-7.4430e-02, -3.0240e-02, -3.5430e-02, -2.3040e-02, 5.3540e-02, 3.0200e-03],
            [1.9589e01, -1.1135e00, 7.3542e-01, 8.0050e-02, 2.5342e-01, 1.1530e-02],
            [3.3268e00, 3.5170e-01, 7.5470e-02, 2.1915e-01, -1.6397e-01, 1.2450e-02],
            [3.2173e-01, 2.1640e-02, 3.2500e-02, 6.5800e-03, -3.4550e-02, 3.8400e-03],
            [1.7020e-02, 2.2200e-03, 4.7400e-03, -1.6500e-03, -1.8900e-03, 6.9500e-03],
        ]),
        'N': np.array([
            [-6.0730e-01, -1.2360e-01, -3.0201e00, -1.1575e00, 5.3055e00, 2.4555e-01],
            [6.7436e00, -1.5013e-01, 6.8387e00, 3.5522e00, -7.4489e00, 5.4906e-01],
            [5.0880e-02, -2.8270e-02, -4.3181e-01, 3.4654e-01, -8.8428e-01, 1.5955e-01],
            [-2.4611e01, 1.9528e00, -4.0233e00, -2.2595e00, 3.8373e00, -1.6552e-01],
            [-1.4903e00, 1.7398e-01, 7.3774e-01, -4.5913e-01, 8.1585e-01, -8.8320e-02],
            [-1.4348e-01, 8.3300e-03, -1.3120e-02, -4.0940e-02, 4.0670e-02, 4.7500e-03],
            [2.8891e01, -1.1502e00, 7.4141e-01, 4.7727e-01, -6.2886e-01, 1.6410e-02],
            [3.3994e00, -1.7399e-01, -3.0713e-01, 1.5000e-01, -1.8832e-01, 1.2450e-02],
            [4.0640e-01, -2.5930e-02, 1.0370e-02, 2.8510e-02, -2.9740e-02, 1.8300e-03],
            [1.0090e-02, 2.9700e-03, 5.1100e-03, 3.9800e-03, -4.0400e-03, 6.1600e-03],
        ]),
        'O': np.array([
            [-9.5815e-01, -1.0843e00, 1.5515e00, -8.7537e-01, 2.0410e00, 5.1222e-01],
            [8.6060e00, 3.4193e00, -4.0874e00, 2.8142e00, -2.0842e00, 3.3703e-01],
            [1.8810e-02, -1.8379e-01, -1.4906e-01, 3.1564e-01, -3.0970e-01, 1.3422e-01],
            [-2.3986e01, -2.4888e00, 4.3356e00, -1.5982e00, 1.0431e00, -9.6270e-02],
            [-4.0039e-01, 6.2117e-01, 2.1524e-01, -3.8355e-01, 2.7360e-01, -6.6430e-02],
            [-1.3987e-01, 8.6902e-04, -1.7110e-02, -4.9410e-02, 2.9410e-02, 1.5250e-02],
            [2.1422e01, 6.4064e-01, -1.3034e00, 3.0260e-01, -1.5838e-01, 9.1000e-03],
            [7.8251e-01, -4.7287e-01, -7.5070e-02, 1.1692e-01, -5.8890e-02, 8.7200e-03],
            [3.7189e-01, -2.3400e-02, 9.4000e-03, 3.3890e-02, -1.5170e-02, -7.5344e-05],
            [1.6820e-02, 2.3400e-03, 4.7200e-03, 6.0200e-03, 6.8667e-04, 7.5400e-03],
        ]),
        'Ne': np.array([
            [-3.3816e00, -6.0381e-01, -5.2745e00, 5.7405e00, 4.2006e00, 1.4412e01],
            [2.1546e01, 2.1443e00, 8.5325e00, -5.8032e00, -3.1864e00, -1.0957e01],
            [5.2790e-02, 1.5187e-01, -4.2933e-01, 1.9982e-01, 5.2700e-02, -1.0029e00],
            [-3.8551e01, -1.6424e00, -3.8758e00, 2.2647e00, 1.0504e00, 2.9793e00],
            [1.1151e00, -3.7364e-01, 5.0111e-01, -2.0411e-01, -2.7000e-03, 5.7614e-01],
            [-2.5719e-01, -3.7110e-02, -9.4400e-03, -1.7610e-02, 1.5710e-02, 9.1900e-02],
            [1.7595e01, 5.5371e-01, 5.7791e-01, -2.8482e-01, -1.1477e-01, -2.6962e-01],
            [-3.7001e00, 2.1255e-01, -1.4192e-01, 4.9800e-02, -4.5800e-03, -8.1250e-02],
            [1.5688e-01, 4.6390e-02, 7.0900e-03, 6.6500e-03, -6.1200e-03, -1.9450e-02],
            [-1.5480e-02, 1.0360e-02, 6.2200e-03, 2.9600e-03, 3.3500e-03, 1.0250e-02],
        ]),
        'Ar': np.array([
            [-1.6479e00, -3.7000e-02, -2.1815e00, 3.4440e-01, -6.2298e-01, -5.5980e-02],
            [1.7269e01, 8.4654e-01, 5.6525e00, -8.8102e-01, 1.9143e00, 8.4358e-01],
            [6.3469e-01, 1.9686e-01, 5.8842e-01, -8.2562e-01, 6.0335e-01, 4.9210e-02],
            [-5.4795e01, -4.4897e-01, -3.4723e00, 9.6778e-01, -6.7700e-01, -1.7924e-01],
            [-2.5512e00, -4.2059e-01, -6.6826e-01, 6.8899e-01, -3.9229e-01, -8.8500e-03],
            [-1.1689e-01, -2.7020e-02, -1.9050e-02, 4.1560e-02, -5.5500e-03, 3.9240e-02],
            [5.6009e01, 2.0570e-01, 7.1256e-01, -1.9402e-01, 8.0610e-02, 1.2520e-02],
            [1.6808e00, 2.0050e-01, 1.8688e-01, -1.4218e-01, 6.4780e-02, -3.1010e-04],
            [5.7200e-03, 1.4660e-02, 1.2050e-02, -1.9050e-02, 7.1000e-03, -8.0800e-03],
            [-2.3900e-03, 3.2500e-03, 4.7000e-03, 4.4500e-03, 1.0420e-02, 8.6000e-03],
        ]),
    })
)
# pylint: enable=line-too-long

# All temperatures are in eV
TEMPERATURE_INTERVALS: Final[Mapping[str, array_typing.Array]] = (
    immutabledict.immutabledict({
        'He': np.array([3.0, 10.0, 30.0, 100.0, 1000.0]),
        'Li': np.array([7.0, 30.0, 60.0, 100.0, 1000.0]),
        'Be': np.array([4.5, 18.0, 70.0, 270.0, 1050.0]),
        'C': np.array([3.0, 10.0, 30.0, 100.0, 300.0]),
        'N': np.array([3.0, 10.0, 30.0, 100.0, 300.0]),
        'O': np.array([3.0, 10.0, 30.0, 100.0, 1000.0]),
        'Ne': np.array([3.0, 30.0, 150.0, 700.0, 3000.0]),
        'Ar': np.array([3.0, 30.0, 150.0, 800.0, 3000.0]),
    })
)

MIN_TEMPERATURES: Final[Mapping[str, float]] = immutabledict.immutabledict({
    'He': 1.0,
    'Li': 1.0,
    'Be': 1.2,
    'C': 1.0,
    'N': 1.0,
    'O': 1.0,
    'Ne': 1.0,
    'Ar': 1.0,
})

MAX_TEMPERATURES: Final[Mapping[str, float]] = immutabledict.immutabledict({
    'He': 1.5e4,
    'Li': 1.0e4,
    'Be': 1.0e4,
    'C': 1.5e4,
    'N': 1.5e4,
    'O': 1.5e4,
    'Ne': 1.0e4,
    'Ar': 1.5e4,
})
